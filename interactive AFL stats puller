# Load necessary libraries
library(fitzRoy)
library(dplyr)
library(ggplot2)
library(patchwork)
library(shiny)
library(tidyr)

# Fetch player stats from AFL Tables using fitzRoy R package
fetch_and_prepare_data <- function(seasons = 2010:2024) {
  fetch_player_stats_afltables(season = seasons)
}

# Shiny App
server <- function(input, output, session) {
  # Reactive value that holds the match data
  match_data <- reactive({
    fetch_and_prepare_data(seq(input$season_range[1], input$season_range[2]))
  })
  
  # Updates list of teams based on match data
  observe({
    teams <- sort(unique(c(match_data()$Home.team, match_data()$Away.team)))
    updateSelectInput(session, "team", choices = teams, selected = teams[1])
  })
  
  # Update the list of players based on selected team
  observeEvent(input$team, {
    players <- match_data() %>%
      filter(Playing.for == input$team) %>%
      distinct(First.name, Surname) %>%
      mutate(player_name = paste(First.name, Surname)) %>%
      pull(player_name)
    updateSelectInput(session, "player", choices = c("All players", sort(players)))
  })
  
  # Update the list of opponents based on selected team
  observeEvent(input$team, {
    opponents <- match_data() %>%
      filter(Home.team == input$team | Away.team == input$team) %>%
      distinct(Home.team, Away.team) %>%
      pivot_longer(cols = everything(), values_to = "team") %>%
      filter(team != input$team) %>%
      pull(team) %>%
      unique()
    updateSelectInput(session, "opponent", choices = c("All teams", sort(opponents)))
  })
  
  # Render statistics based on user inputs
  output$statistics <- renderPrint({
    req(match_data())  # Ensure data is available
    req(input$team)    # Ensure team is selected
    
    # Filter data for the selected team
    team_stats <- match_data() %>%
      filter(Playing.for == input$team)
    
    # Apply opponent filter
    if (input$opponent != "All teams") {
      team_stats <- team_stats %>%
        filter(Home.team == input$opponent | Away.team == input$opponent)
    }
    
    # Handle "All players" case
    if (input$player != "All players") {
      # Split selected player name into first and last name
      selected_player <- strsplit(input$player, " ")[[1]]
      first_name <- selected_player[1]
      last_name <- selected_player[2]
      
      team_stats <- team_stats %>%
        filter(
          First.name == first_name,
          Surname == last_name,
          Goals >= input$goals_min,
          Disposals >= input$disposals_min  # Filter by minimum disposals
        )
    }
    
    # Calculate win/loss and margins
    team_stats <- team_stats %>%
      mutate(
        win = ifelse((Playing.for == Home.team & Home.score > Away.score) | 
                       (Playing.for == Away.team & Away.score > Home.score), 1, 0),
        margin = ifelse(Playing.for == Home.team, Home.score - Away.score, Away.score - Home.score)
      )
    
    # Calculate statistics
    win_percentage <- team_stats %>%
      summarise(win_percent = sum(win) / n() * 100) %>%
      pull(win_percent) %>%
      round(1)
    
    average_winning_margin <- team_stats %>%
      filter(win == 1) %>%
      summarise(avg_winning_margin = mean(margin, na.rm = TRUE)) %>%
      pull(avg_winning_margin) %>%
      round(1)
    
    average_losing_margin <- team_stats %>%
      filter(win == 0) %>%
      summarise(avg_losing_margin = mean(abs(margin), na.rm = TRUE)) %>%
      pull(avg_losing_margin) %>%
      round(1)
    
    # Format and return output
    cat("Performance Summary:\n")
    cat("---------------------\n")
    if (input$player == "All players") {
      cat("Team-Level Statistics:\n")
    } else {
      cat(sprintf("Player: %s\n", input$player))
    }
    cat(sprintf("Win Percentage: %.1f%%\n", win_percentage))
    cat(sprintf("Average Winning Margin: %.1f points\n", average_winning_margin))
    cat(sprintf("Average Losing Margin: %.1f points\n", average_losing_margin))
  })
}

# Run the Shiny App
library(shiny)

ui <- fluidPage(
  titlePanel("Parlay Maker"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("season_range", "Select Seasons:", min = 2010, max = 2024, value = c(2010, 2024), sep = ""),
      selectInput("team", "Select Team:", choices = NULL),
      selectInput("player", "Select Player:", choices = NULL),
      selectInput("opponent", "Select Opponent:", choices = NULL),
      numericInput("goals_min", "Minimum Goals:", value = 0, min = 0),
      numericInput("disposals_min", "Minimum Disposals:", value = 0, min = 0)
    ),
    mainPanel(
      verbatimTextOutput("statistics")
    )
  )
)

shinyApp(ui = ui, server = server)

