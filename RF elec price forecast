# Load and install required libraries
if (!requireNamespace("xgboost", quietly = TRUE)) install.packages("xgboost", dependencies = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table", dependencies = TRUE)
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate", dependencies = TRUE)

library(xgboost)
library(data.table)
library(lubridate)

# Define file paths
input_file <- "Forecasting_NEM_data.csv"
output_file <- "forecasted_ElecPrice.csv"

# Load the data
data <- fread(input_file)

# Preprocess the data
data[, date := dmy(date)]
data[, `:=`(
  month = month(date),
  year = year(date),
  quarter = quarter(date)
)]

# Function to create lag features
create_lag_features <- function(data, target_column, lags) {
  for (lag in lags) {
    data[, paste0(target_column, "_lag", lag) := shift(get(target_column), n = lag)]
  }
}

# Create lag features for electricity price
lag_range <- 1:12  # 12 lag features for past year
create_lag_features(data, "ElecPrice", lag_range)

# Remove rows with missing values (due to lag creation)
data <- na.omit(data)

# Split into training data
train_data <- data[date < ymd("2024-07-01")]

# Create features and target variable
train_features <- train_data[, .(
  TotGen, Lignite, Coal, GenBiogas, GenDistil, GenGasSte, GenCCGT, GenOCGT,
  GenRECI, GenCoaGas, GenHyd, GenWind, GenLSPV, GenRTPV, month, year, quarter,
  ElecPrice_lag1, ElecPrice_lag2, ElecPrice_lag3, ElecPrice_lag4, ElecPrice_lag5,
  ElecPrice_lag6, ElecPrice_lag7, ElecPrice_lag8, ElecPrice_lag9, ElecPrice_lag10,
  ElecPrice_lag11, ElecPrice_lag12
)]
train_target <- train_data$ElecPrice

# Convert data to xgboost matrix
train_matrix <- xgb.DMatrix(data = as.matrix(train_features), label = train_target)

# Define XGBoost parameters
xgb_params <- list(
  booster = "gbtree",
  objective = "reg:squarederror",
  eta = 0.05,
  max_depth = 10,
  subsample = 0.8,
  colsample_bytree = 0.8
)

# Train the model
xgb_model <- xgb.train(
  params = xgb_params,
  data = train_matrix,
  nrounds = 500,
  watchlist = list(train = train_matrix),
  print_every_n = 10
)

# Prepare future data for prediction
future_dates <- seq.Date(from = ymd("2024-07-01"), to = ymd("2050-12-31"), by = "month")
future_data <- data.table(date = future_dates)
future_data[, `:=`(month = month(date), year = year(date), quarter = quarter(date))]

# Populate future generation values with historical averages
avg_gen_values <- train_data[, lapply(.SD, mean), .SDcols = c(
  "TotGen", "Lignite", "Coal", "GenBiogas", "GenDistil", "GenGasSte", "GenCCGT",
  "GenOCGT", "GenRECI", "GenCoaGas", "GenHyd", "GenWind", "GenLSPV", "GenRTPV"
)]
future_data <- cbind(future_data, avg_gen_values)

# Create placeholders for lag features
for (lag in lag_range) {
  future_data[, paste0("ElecPrice_lag", lag) := NA]
}

# Function to iteratively update lag features and predict
update_lags <- function(data, lags) {
  for (lag in seq_along(lags)) {
    data[, paste0("ElecPrice_lag", lag) := shift(ElecPrice, n = lag, type = "lag")]
  }
  return(data)
}

# Forecast future electricity prices
all_forecasts <- list()
for (i in seq_len(nrow(future_data))) {
  # Prepare features for prediction
  current_features <- future_data[i, .(
    TotGen, Lignite, Coal, GenBiogas, GenDistil, GenGasSte, GenCCGT, GenOCGT,
    GenRECI, GenCoaGas, GenHyd, GenWind, GenLSPV, GenRTPV, month, year, quarter,
    ElecPrice_lag1, ElecPrice_lag2, ElecPrice_lag3, ElecPrice_lag4, ElecPrice_lag5,
    ElecPrice_lag6, ElecPrice_lag7, ElecPrice_lag8, ElecPrice_lag9, ElecPrice_lag10,
    ElecPrice_lag11, ElecPrice_lag12
  )]
  current_matrix <- xgb.DMatrix(data = as.matrix(current_features))
  
  # Generate prediction
  prediction <- predict(xgb_model, current_matrix)
  future_data[i, ElecPrice := prediction]
  
  # Update lag features
  future_data <- update_lags(future_data, lag_range)
  
  # Store forecast
  all_forecasts[[i]] <- future_data[i, .(date, ElecPrice)]
}

# Combine all forecasts into a single dataset
future_forecast <- rbindlist(all_forecasts)

# Save the forecasted data
fwrite(future_forecast, output_file)
cat("Forecasted electricity prices saved to:", output_file, "\n")

# Print the forecasted data (for review)
print(future_forecast)
